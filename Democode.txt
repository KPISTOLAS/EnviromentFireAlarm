#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// WiFi & MQTT Settings
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";
const char* mqtt_server = "YOUR_MQTT_BROKER";

WiFiClient espClient;
PubSubClient client(espClient);

// DHT22 Sensor
#define DHTPIN 4
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// Soil Moisture Sensor
#define SOIL_MOISTURE_PIN 34

// Anemometer
#define WIND_SPEED_PIN 35

// Threshold Values (Dummy Averages)
#define TEMP_THRESHOLD 30.0  // Example threshold for temperature
#define HUM_THRESHOLD 70.0   // Example threshold for humidity
#define SOIL_THRESHOLD 500   // Example threshold for soil moisture
#define WIND_THRESHOLD 600   // Example threshold for wind speed

// Fire Danger Conditions
#define FIRE_TEMP_THRESHOLD 40.0 // High temperature indicating fire risk
#define FIRE_HUM_THRESHOLD 30.0  // Low humidity indicating fire risk
#define FIRE_SOIL_DRY 300        // Very dry soil indicating fire risk

// Function to Connect to Wi-Fi
void setup_wifi() {
  delay(10);
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected to Wi-Fi");
}

// Function to Connect to MQTT Broker
void reconnect_mqtt() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  dht.begin();
}

void loop() {
  if (!client.connected()) {
    reconnect_mqtt();
  }
  client.loop();

  // Read Sensors
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int soilMoisture = analogRead(SOIL_MOISTURE_PIN);
  int windSpeed = analogRead(WIND_SPEED_PIN);

  // Publish Data to MQTT
  char tempString[8], humString[8], soilString[8], windString[8];
  dtostrf(temperature, 6, 2, tempString);
  dtostrf(humidity, 6, 2, humString);
  dtostrf(soilMoisture, 6, 2, soilString);
  dtostrf(windSpeed, 6, 2, windString);

  client.publish("weather/temperature", tempString);
  client.publish("weather/humidity", humString);
  client.publish("weather/soilMoisture", soilString);
  client.publish("weather/windSpeed", windString);

  // Check for Alert Conditions
  if (temperature > TEMP_THRESHOLD) {
    client.publish("weather/alerts", "Temperature too high!");
  }
  if (humidity > HUM_THRESHOLD) {
    client.publish("weather/alerts", "Humidity too high!");
  }
  if (soilMoisture > SOIL_THRESHOLD) {
    client.publish("weather/alerts", "Soil moisture too high!");
  }
  if (windSpeed > WIND_THRESHOLD) {
    client.publish("weather/alerts", "Wind speed too high!");
  }

  // Fire Danger Detection
  if (temperature > FIRE_TEMP_THRESHOLD && humidity < FIRE_HUM_THRESHOLD && soilMoisture < FIRE_SOIL_DRY) {
    client.publish("weather/fire_alert", "ðŸ”¥ Fire danger detected! High temperature, low humidity, and dry soil.");
  }

  delay(5000); // Delay for power efficiency
}
